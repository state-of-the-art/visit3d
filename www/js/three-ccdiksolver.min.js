import{BufferAttribute as e,BufferGeometry as f,Color as g,Line as h,LineBasicMaterial as i,Matrix4 as c,Mesh as j,MeshBasicMaterial as k,Object3D as d,Quaternion as b,SphereGeometry as l,Vector3 as a}from"three";let _q=new b,_targetPos=new a,_targetVec=new a,_effectorPos=new a,_effectorVec=new a,_linkPos=new a,_invLinkQ=new b,_linkScale=new a,_axis=new a,_vector=new a,_matrix=new c;class CCDIKSolver{constructor(a,b=[]){this.mesh=a,this.iks=b,this._valid()}update(){let b=this.iks;for(let a=0,c=b.length;a<c;a++)this.updateOne(b[a]);return this}updateOne(a){let h=this.mesh.skeleton.bones,j=Math,o=h[a.effector],p=h[a.target];_targetPos.setFromMatrixPosition(p.matrixWorld);let e=a.links,q=void 0!==a.iteration?a.iteration:1;for(let k=0;k<q;k++){let l=!1;for(let d=0,r=e.length;d<r;d++){let c=h[e[d].index];if(!1===e[d].enabled)break;let g=e[d].limitation,m=e[d].rotationMin,n=e[d].rotationMax;c.matrixWorld.decompose(_linkPos,_invLinkQ,_linkScale),_invLinkQ.invert(),_effectorPos.setFromMatrixPosition(o.matrixWorld),_effectorVec.subVectors(_effectorPos,_linkPos),_effectorVec.applyQuaternion(_invLinkQ),_effectorVec.normalize(),_targetVec.subVectors(_targetPos,_linkPos),_targetVec.applyQuaternion(_invLinkQ),_targetVec.normalize();let b=_targetVec.dot(_effectorVec);if(b>1?b=1:b< -1&&(b=-1),!((b=j.acos(b))<1e-5)){if(void 0!==a.minAngle&&b<a.minAngle&&(b=a.minAngle),void 0!==a.maxAngle&&b>a.maxAngle&&(b=a.maxAngle),_axis.crossVectors(_effectorVec,_targetVec),_axis.normalize(),_q.setFromAxisAngle(_axis,b),c.quaternion.multiply(_q),void 0!==g){let f=c.quaternion.w;f>1&&(f=1);let i=j.sqrt(1-f*f);c.quaternion.set(g.x*i,g.y*i,g.z*i,f)}void 0!==m&&c.rotation.setFromVector3(_vector.setFromEuler(c.rotation).max(m)),void 0!==n&&c.rotation.setFromVector3(_vector.setFromEuler(c.rotation).min(n)),c.updateMatrixWorld(!0),l=!0}}if(!l)break}return this}createHelper(){return new CCDIKHelper(this.mesh,this.mesh.geometry.userData.MMD.iks)}_valid(){let e=this.iks,f=this.mesh.skeleton.bones;for(let c=0,i=e.length;c<i;c++){let g=e[c],j=f[g.effector],h=g.links,a,b;a=j;for(let d=0,k=h.length;d<k;d++)b=f[h[d].index],a.parent!==b&&console.warn("THREE.CCDIKSolver: bone "+a.name+" is not the child of bone "+b.name),a=b}}}function getPosition(a,b){return _vector.setFromMatrixPosition(a.matrixWorld).applyMatrix4(b)}function setPositionOfBoneToAttributeArray(a,b,d,e){let c=getPosition(d,e);a[3*b+0]=c.x,a[3*b+1]=c.y,a[3*b+2]=c.z}class CCDIKHelper extends d{constructor(a,b=[]){super(),this.root=a,this.iks=b,this.matrix.copy(a.matrixWorld),this.matrixAutoUpdate=!1,this.sphereGeometry=new l(.25,16,8),this.targetSphereMaterial=new k({color:new g(16746632),depthTest:!1,depthWrite:!1,transparent:!0}),this.effectorSphereMaterial=new k({color:new g(8978312),depthTest:!1,depthWrite:!1,transparent:!0}),this.linkSphereMaterial=new k({color:new g(8947967),depthTest:!1,depthWrite:!1,transparent:!0}),this.lineMaterial=new i({color:new g(16711680),depthTest:!1,depthWrite:!1,transparent:!0}),this._init()}updateMatrixWorld(m){let e=this.root;if(this.visible){let b=0,i=this.iks,c=e.skeleton.bones;_matrix.copy(e.matrixWorld).invert();for(let f=0,n=i.length;f<n;f++){let a=i[f],j=c[a.target],k=c[a.effector],o=this.children[b++],p=this.children[b++];o.position.copy(getPosition(j,_matrix)),p.position.copy(getPosition(k,_matrix));for(let g=0,q=a.links.length;g<q;g++){let r=a.links[g],s=c[r.index],t=this.children[b++];t.position.copy(getPosition(s,_matrix))}let l=this.children[b++],h=l.geometry.attributes.position.array;setPositionOfBoneToAttributeArray(h,0,j,_matrix),setPositionOfBoneToAttributeArray(h,1,k,_matrix);for(let d=0,u=a.links.length;d<u;d++){let v=a.links[d],w=c[v.index];setPositionOfBoneToAttributeArray(h,d+2,w,_matrix)}l.geometry.attributes.position.needsUpdate=!0}}this.matrix.copy(e.matrixWorld),super.updateMatrixWorld(m)}_init(){let o=this,b=this.iks;function g(){return new j(o.sphereGeometry,o.targetSphereMaterial)}function i(){return new j(o.sphereGeometry,o.effectorSphereMaterial)}function k(){return new j(o.sphereGeometry,o.linkSphereMaterial)}function l(a){return new h(function(b){let a=new f,c=new Float32Array((2+b.links.length)*3);return a.setAttribute("position",new e(c,3)),a}(a),o.lineMaterial)}for(let a=0,m=b.length;a<m;a++){let c=b[a];this.add(g()),this.add(i());for(let d=0,n=c.links.length;d<n;d++)this.add(k());this.add(l(c))}}}export{CCDIKSolver,CCDIKHelper}
